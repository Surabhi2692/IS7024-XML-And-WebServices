using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace CovidTracker
{
    // <auto-generated />
    //
    // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
    //
    //    using QuickType;
    //
    //    var moviesRecommendations = MoviesRecommendations.FromJson(jsonString);
           public partial class MoviesRecommendations
        {
            [JsonProperty("adult")]
            public Adult Adult { get; set; }

            [JsonProperty("belongs_to_collection")]
            public string BelongsToCollection { get; set; }

            [JsonProperty("budget")]
            public long Budget { get; set; }

            [JsonProperty("genres")]
            public Genres Genres { get; set; }

            [JsonProperty("homepage")]
            public HomepageUnion Homepage { get; set; }

            [JsonProperty("id")]
            public Id Id { get; set; }

            [JsonProperty("imdb_id")]
            public string ImdbId { get; set; }

            [JsonProperty("original_language")]
            public OriginalLanguage OriginalLanguage { get; set; }

            [JsonProperty("original_title")]
            public string OriginalTitle { get; set; }

            [JsonProperty("overview")]
            public string Overview { get; set; }

            [JsonProperty("popularity")]
            public Popularity Popularity { get; set; }

            [JsonProperty("poster_path")]
            public string PosterPath { get; set; }

            [JsonProperty("production_companies")]
            public Genres ProductionCompanies { get; set; }

            [JsonProperty("production_countries")]
            public Genres ProductionCountries { get; set; }

            [JsonProperty("release_date")]
            public string ReleaseDate { get; set; }

            [JsonProperty("revenue")]
            public Id Revenue { get; set; }

            [JsonProperty("runtime")]
            public Id Runtime { get; set; }

            [JsonProperty("spoken_languages")]
            public Genres SpokenLanguages { get; set; }

            [JsonProperty("status")]
            public Status Status { get; set; }

            [JsonProperty("tagline")]
            public string Tagline { get; set; }

            [JsonProperty("title")]
            public string Title { get; set; }

            [JsonProperty("video")]
            public Adult Video { get; set; }

            [JsonProperty("vote_average")]
            public Popularity VoteAverage { get; set; }

            [JsonProperty("vote_count")]
            public Id VoteCount { get; set; }
        }

        public enum Adult { Empty, False };

        public enum HomepageEnum { Empty, NameDrama };

        public enum OriginalLanguage { Ar, Cn, De, Empty, En, Es, Fa, Fr, It, Nl, Zh };

        public enum Status { Empty, Released };

        public partial struct Genres
        {
            public object[] AnythingArray;
            public string String;

            public static implicit operator Genres(object[] AnythingArray) => new Genres { AnythingArray = AnythingArray };
            public static implicit operator Genres(string String) => new Genres { String = String };
        }

        public partial struct HomepageUnion
        {
            public HomepageEnum? Enum;
            public Uri PurpleUri;

            public static implicit operator HomepageUnion(HomepageEnum Enum) => new HomepageUnion { Enum = Enum };
            public static implicit operator HomepageUnion(Uri PurpleUri) => new HomepageUnion { PurpleUri = PurpleUri };
        }

        public partial struct Id
        {
            public long? Integer;
            public string String;

            public static implicit operator Id(long Integer) => new Id { Integer = Integer };
            public static implicit operator Id(string String) => new Id { String = String };
        }

        public partial struct Popularity
        {
            public double? Double;
            public string String;

            public static implicit operator Popularity(double Double) => new Popularity { Double = Double };
            public static implicit operator Popularity(string String) => new Popularity { String = String };
        }

        public partial class MoviesRecommendations
        {
            public static MoviesRecommendations[] FromJson(string json) => JsonConvert.DeserializeObject<MoviesRecommendations[]>(json, Converter.Settings);
        }

        public static class Serialize
        {
            public static string ToJson(this MoviesRecommendations[] self) => JsonConvert.SerializeObject(self, Converter.Settings);
        }

        internal static class Converter
        {
            public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
            {
                MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
                DateParseHandling = DateParseHandling.None,
                Converters =
            {
                AdultConverter.Singleton,
                GenresConverter.Singleton,
                HomepageUnionConverter.Singleton,
                HomepageEnumConverter.Singleton,
                IdConverter.Singleton,
                OriginalLanguageConverter.Singleton,
                PopularityConverter.Singleton,
                StatusConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
            };
        }

        internal class AdultConverter : JsonConverter
        {
            public override bool CanConvert(Type t) => t == typeof(Adult) || t == typeof(Adult?);

            public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
            {
                if (reader.TokenType == JsonToken.Null) return null;
                var value = serializer.Deserialize<string>(reader);
                switch (value)
                {
                    case "":
                        return Adult.Empty;
                    case "False":
                        return Adult.False;
                }
                throw new Exception("Cannot unmarshal type Adult");
            }

            public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
            {
                if (untypedValue == null)
                {
                    serializer.Serialize(writer, null);
                    return;
                }
                var value = (Adult)untypedValue;
                switch (value)
                {
                    case Adult.Empty:
                        serializer.Serialize(writer, "");
                        return;
                    case Adult.False:
                        serializer.Serialize(writer, "False");
                        return;
                }
                throw new Exception("Cannot marshal type Adult");
            }

            public static readonly AdultConverter Singleton = new AdultConverter();
        }

        internal class GenresConverter : JsonConverter
        {
            public override bool CanConvert(Type t) => t == typeof(Genres) || t == typeof(Genres?);

            public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
            {
                switch (reader.TokenType)
                {
                    case JsonToken.String:
                    case JsonToken.Date:
                        var stringValue = serializer.Deserialize<string>(reader);
                        return new Genres { String = stringValue };
                    case JsonToken.StartArray:
                        var arrayValue = serializer.Deserialize<object[]>(reader);
                        return new Genres { AnythingArray = arrayValue };
                }
                throw new Exception("Cannot unmarshal type Genres");
            }

            public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
            {
                var value = (Genres)untypedValue;
                if (value.String != null)
                {
                    serializer.Serialize(writer, value.String);
                    return;
                }
                if (value.AnythingArray != null)
                {
                    serializer.Serialize(writer, value.AnythingArray);
                    return;
                }
                throw new Exception("Cannot marshal type Genres");
            }

            public static readonly GenresConverter Singleton = new GenresConverter();
        }

        internal class HomepageUnionConverter : JsonConverter
        {
            public override bool CanConvert(Type t) => t == typeof(HomepageUnion) || t == typeof(HomepageUnion?);

            public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
            {
                switch (reader.TokenType)
                {
                    case JsonToken.String:
                    case JsonToken.Date:
                        var stringValue = serializer.Deserialize<string>(reader);
                        switch (stringValue)
                        {
                            case "":
                                return new HomepageUnion { Enum = HomepageEnum.Empty };
                            case "'name': 'Drama'}":
                                return new HomepageUnion { Enum = HomepageEnum.NameDrama };
                        }
                        try
                        {
                            var uri = new Uri(stringValue);
                            return new HomepageUnion { PurpleUri = uri };
                        }
                        catch (UriFormatException) { }
                        break;
                }
                throw new Exception("Cannot unmarshal type HomepageUnion");
            }

            public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
            {
                var value = (HomepageUnion)untypedValue;
                if (value.Enum != null)
                {
                    switch (value.Enum)
                    {
                        case HomepageEnum.Empty:
                            serializer.Serialize(writer, "");
                            return;
                        case HomepageEnum.NameDrama:
                            serializer.Serialize(writer, "'name': 'Drama'}");
                            return;
                    }
                }
                if (value.PurpleUri != null)
                {
                    serializer.Serialize(writer, value.PurpleUri.ToString());
                    return;
                }
                throw new Exception("Cannot marshal type HomepageUnion");
            }

            public static readonly HomepageUnionConverter Singleton = new HomepageUnionConverter();
        }

        internal class HomepageEnumConverter : JsonConverter
        {
            public override bool CanConvert(Type t) => t == typeof(HomepageEnum) || t == typeof(HomepageEnum?);

            public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
            {
                if (reader.TokenType == JsonToken.Null) return null;
                var value = serializer.Deserialize<string>(reader);
                switch (value)
                {
                    case "":
                        return HomepageEnum.Empty;
                    case "'name': 'Drama'}":
                        return HomepageEnum.NameDrama;
                }
                throw new Exception("Cannot unmarshal type HomepageEnum");
            }

            public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
            {
                if (untypedValue == null)
                {
                    serializer.Serialize(writer, null);
                    return;
                }
                var value = (HomepageEnum)untypedValue;
                switch (value)
                {
                    case HomepageEnum.Empty:
                        serializer.Serialize(writer, "");
                        return;
                    case HomepageEnum.NameDrama:
                        serializer.Serialize(writer, "'name': 'Drama'}");
                        return;
                }
                throw new Exception("Cannot marshal type HomepageEnum");
            }

            public static readonly HomepageEnumConverter Singleton = new HomepageEnumConverter();
        }

        internal class IdConverter : JsonConverter
        {
            public override bool CanConvert(Type t) => t == typeof(Id) || t == typeof(Id?);

            public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
            {
                switch (reader.TokenType)
                {
                    case JsonToken.Integer:
                        var integerValue = serializer.Deserialize<long>(reader);
                        return new Id { Integer = integerValue };
                    case JsonToken.String:
                    case JsonToken.Date:
                        var stringValue = serializer.Deserialize<string>(reader);
                        return new Id { String = stringValue };
                }
                throw new Exception("Cannot unmarshal type Id");
            }

            public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
            {
                var value = (Id)untypedValue;
                if (value.Integer != null)
                {
                    serializer.Serialize(writer, value.Integer.Value);
                    return;
                }
                if (value.String != null)
                {
                    serializer.Serialize(writer, value.String);
                    return;
                }
                throw new Exception("Cannot marshal type Id");
            }

            public static readonly IdConverter Singleton = new IdConverter();
        }

        internal class OriginalLanguageConverter : JsonConverter
        {
            public override bool CanConvert(Type t) => t == typeof(OriginalLanguage) || t == typeof(OriginalLanguage?);

            public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
            {
                if (reader.TokenType == JsonToken.Null) return null;
                var value = serializer.Deserialize<string>(reader);
                switch (value)
                {
                    case "":
                        return OriginalLanguage.Empty;
                    case "ar":
                        return OriginalLanguage.Ar;
                    case "cn":
                        return OriginalLanguage.Cn;
                    case "de":
                        return OriginalLanguage.De;
                    case "en":
                        return OriginalLanguage.En;
                    case "es":
                        return OriginalLanguage.Es;
                    case "fa":
                        return OriginalLanguage.Fa;
                    case "fr":
                        return OriginalLanguage.Fr;
                    case "it":
                        return OriginalLanguage.It;
                    case "nl":
                        return OriginalLanguage.Nl;
                    case "zh":
                        return OriginalLanguage.Zh;
                }
                throw new Exception("Cannot unmarshal type OriginalLanguage");
            }

            public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
            {
                if (untypedValue == null)
                {
                    serializer.Serialize(writer, null);
                    return;
                }
                var value = (OriginalLanguage)untypedValue;
                switch (value)
                {
                    case OriginalLanguage.Empty:
                        serializer.Serialize(writer, "");
                        return;
                    case OriginalLanguage.Ar:
                        serializer.Serialize(writer, "ar");
                        return;
                    case OriginalLanguage.Cn:
                        serializer.Serialize(writer, "cn");
                        return;
                    case OriginalLanguage.De:
                        serializer.Serialize(writer, "de");
                        return;
                    case OriginalLanguage.En:
                        serializer.Serialize(writer, "en");
                        return;
                    case OriginalLanguage.Es:
                        serializer.Serialize(writer, "es");
                        return;
                    case OriginalLanguage.Fa:
                        serializer.Serialize(writer, "fa");
                        return;
                    case OriginalLanguage.Fr:
                        serializer.Serialize(writer, "fr");
                        return;
                    case OriginalLanguage.It:
                        serializer.Serialize(writer, "it");
                        return;
                    case OriginalLanguage.Nl:
                        serializer.Serialize(writer, "nl");
                        return;
                    case OriginalLanguage.Zh:
                        serializer.Serialize(writer, "zh");
                        return;
                }
                throw new Exception("Cannot marshal type OriginalLanguage");
            }

            public static readonly OriginalLanguageConverter Singleton = new OriginalLanguageConverter();
        }

        internal class PopularityConverter : JsonConverter
        {
            public override bool CanConvert(Type t) => t == typeof(Popularity) || t == typeof(Popularity?);

            public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
            {
                switch (reader.TokenType)
                {
                    case JsonToken.Integer:
                    case JsonToken.Float:
                        var doubleValue = serializer.Deserialize<double>(reader);
                        return new Popularity { Double = doubleValue };
                    case JsonToken.String:
                    case JsonToken.Date:
                        var stringValue = serializer.Deserialize<string>(reader);
                        return new Popularity { String = stringValue };
                }
                throw new Exception("Cannot unmarshal type Popularity");
            }

            public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
            {
                var value = (Popularity)untypedValue;
                if (value.Double != null)
                {
                    serializer.Serialize(writer, value.Double.Value);
                    return;
                }
                if (value.String != null)
                {
                    serializer.Serialize(writer, value.String);
                    return;
                }
                throw new Exception("Cannot marshal type Popularity");
            }

            public static readonly PopularityConverter Singleton = new PopularityConverter();
        }

        internal class StatusConverter : JsonConverter
        {
            public override bool CanConvert(Type t) => t == typeof(Status) || t == typeof(Status?);

            public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
            {
                if (reader.TokenType == JsonToken.Null) return null;
                var value = serializer.Deserialize<string>(reader);
                switch (value)
                {
                    case "":
                        return Status.Empty;
                    case "Released":
                        return Status.Released;
                }
                throw new Exception("Cannot unmarshal type Status");
            }

            public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
            {
                if (untypedValue == null)
                {
                    serializer.Serialize(writer, null);
                    return;
                }
                var value = (Status)untypedValue;
                switch (value)
                {
                    case Status.Empty:
                        serializer.Serialize(writer, "");
                        return;
                    case Status.Released:
                        serializer.Serialize(writer, "Released");
                        return;
                }
                throw new Exception("Cannot marshal type Status");
            }

            public static readonly StatusConverter Singleton = new StatusConverter();
        }
    }



